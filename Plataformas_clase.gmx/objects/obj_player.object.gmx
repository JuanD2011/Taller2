<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inicialización de Variables

grav = 0.22;
hsp = 0;
vsp = 0;
movespeed_normal = 4;
movespeed_powerup = 6;
jumpspeed_normal = 6.5;
jumpspeed_powerup = 9;

movespeed = movespeed_normal;
jumpspeed = jumpspeed_normal;

shoot = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = movespeed_normal;
//sprite_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimiento del Personaje

//Obtener las entradas de teclado

key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_up = keyboard_check_pressed(vk_up);

//Operaciones con las entradas de teclado

move = key_right - key_left;
hsp = move * movespeed;

//Sprite

if (movespeed == movespeed_normal) &amp;&amp; (jumpspeed == jumpspeed_normal)
{
    if((vsp == 0) &amp;&amp; (hsp == 0))
    {
        sprite_index = spr_player_stand;
    }
    if(move)
    {
        sprite_index = spr_player_r;
    }
    if (-move)
    {
        sprite_index = spr_player_l;
    }
    
    if(-vsp) &amp;&amp; (hsp == 0)
    {
        sprite_index = spr_player_stand_jump;
    }
    if(vsp) &amp;&amp; (hsp == 0)
    {
        sprite_index = spr_player_stand_sad;
    }  
    if(-vsp) &amp;&amp; (hsp &gt; 0)
    {
        sprite_index = spr_player_jump;
    }
    if(-vsp) &amp;&amp; (hsp &lt; 0)
    {
        sprite_index = spr_player_jump_l;
    }
    if((vsp) &amp;&amp; (hsp &lt; 0))
    {
        sprite_index = spr_player_sad_l;
    }
    if((vsp) &amp;&amp; (hsp &gt; 0))
    {
        sprite_index = spr_player_sad;
    }
}
else
{
    if(movespeed == movespeed_powerup)
    {
        if(move)
        {
            sprite_index = spr_player_puy_r;
        }
        if(-move)
        {
            sprite_index = spr_player_puy_l;
        }
    }
    if(jumpspeed == jumpspeed_powerup)
    {
        if(move)
        {
            sprite_index = spr_player_pur_r
        }
        if(-move)
        {
            sprite_index = spr_player_pur_l
        }
    }
}

//Colisión horizontal

if(place_meeting(x + hsp, y, obj_wall))
{
    while(!place_meeting(x + sign(hsp), y, obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0    
}
x += hsp;

//Salto

if (vsp &lt; 10)
{
    vsp += grav;
} 
if(place_meeting(x, y + 1, obj_wall))
{
    vsp = key_up * -jumpspeed;
}

//Colisión vertical

if(place_meeting(x, y + vsp, obj_wall))
{
    while(!place_meeting(x, y + sign(vsp), obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0    
}
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disparar

if(keyboard_check(vk_space) &amp;&amp; (shoot) &amp;&amp; ((sprite_index = spr_player_r) || (sprite_index == spr_player_puy_r) || (sprite_index == spr_player_pur_r) || (sprite_index == spr_player_jump) || (sprite_index == spr_player_sad) || (sprite_index == spr_player_stand) || (sprite_index == spr_player_stand_jump) || (sprite_index == spr_player_stand_sad)))
{
    instance_create(x, y, obj_ninja_star);
    shoot = 0;
    alarm[2] = 15;
}
if(keyboard_check(vk_space) &amp;&amp; (shoot) &amp;&amp; ((sprite_index = spr_player_l) || (sprite_index == spr_player_puy_l) || (sprite_index == spr_player_pur_l) || (sprite_index == spr_player_jump_l) || (sprite_index == spr_player_sad_l)))
{
    instance_create(x, y, obj_ninja_star_l);
    shoot = 0;
    alarm[2] = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
